/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import SharedClasses.Database;
import SharedClasses.Dataset;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;

/**  
 * IST 411-001 - Final Project
 * DataFrame.java  
 * Purpose: Allows data to be visible on screen via GUI components
 *  
 * @author (Lead) River Martinez & Kameron Dangleben 
 * @version 1.0 5/4/2021
 */
public class DataFrame extends javax.swing.JFrame {

    /**
     * Creates new form DataFrame
     */
    public DataFrame() { //DataFrame constructor
        initComponents();
        setVisible(true);
        setResizable(false);
        setLocationRelativeTo(null);
        deleteVaccineTableOnClose();
        dataTable.setFont(new java.awt.Font("Verdana", 1, 11));
        dataTable.setForeground(new java.awt.Color(38,172,235));
        dataTable.getTableHeader().setBackground(new java.awt.Color(38,172,235));
        dataTable.getTableHeader().setForeground(new java.awt.Color(255,255,255));
        dataTable.getTableHeader().setFont(new java.awt.Font("Verdana", 1, 11));
        dataTable.setToolTipText("<html>"
                                    + "This area is where<br>"
                                    + "the data will be displayed"
                                +"</html>");
        pack();
    }

    /**
     * Purpose: Uses a WindowListener to delete the VaccineInformation table once the GUI is exited
     */
    private void deleteVaccineTableOnClose() {
        addWindowListener(new WindowAdapter() 
        {
            @Override
            public void windowClosing(WindowEvent e)
            {
                try {
                    new Database().deleteVaccineTable();
                } catch (SQLException ex) {
                    Logger.getLogger(DataFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        comboPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        tableTypeLabel = new javax.swing.JLabel();
        monthLabel = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        tableTypeCombo = new javax.swing.JComboBox<>();
        stateCombo = new javax.swing.JComboBox<>();
        monthCombo = new javax.swing.JComboBox<>();
        tablePanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        jPanel3.setBackground(new java.awt.Color(38, 172, 235));
        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 153, 255)));
        jPanel3.setToolTipText("");
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboPanel.setBackground(new java.awt.Color(153, 153, 255));
        comboPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        comboPanel.setForeground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(153, 153, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filters:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel5.setToolTipText("");
        jPanel5.setAutoscrolls(true);

        tableTypeLabel.setBackground(new java.awt.Color(255, 255, 255));
        tableTypeLabel.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        tableTypeLabel.setForeground(new java.awt.Color(255, 255, 255));
        tableTypeLabel.setText("Table Type:");

        monthLabel.setBackground(new java.awt.Color(255, 255, 255));
        monthLabel.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        monthLabel.setForeground(new java.awt.Color(255, 255, 255));
        monthLabel.setText("Month:");

        stateLabel.setBackground(new java.awt.Color(255, 255, 255));
        stateLabel.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        stateLabel.setForeground(new java.awt.Color(255, 255, 255));
        stateLabel.setText("State:");

        updateButton.setBackground(new java.awt.Color(255, 255, 255));
        updateButton.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        updateButton.setForeground(new java.awt.Color(38, 172, 235));
        updateButton.setText("Go");
        updateButton.setToolTipText("<html>\nThis button updates<br>\nthe table below after<br> \nthe proper filters are made.\n</html>");
        updateButton.setFocusable(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        tableTypeCombo.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        tableTypeCombo.setForeground(new java.awt.Color(38, 172, 235));
        tableTypeCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Monthly Cases And Deaths", "Monthly Vaccine Information", "Monthly Trends" }));
        tableTypeCombo.setToolTipText("<html>\nThis combo box allows users<br>\nto filter through three tables:<br>\n -Monthly Cases And Deaths,<br>\n -Monthly Vaccine Information,<br>\n -Monthly Trends.\n</html>");
        tableTypeCombo.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tableTypeCombo.setFocusable(false);
        tableTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableTypeComboActionPerformed(evt);
            }
        });

        stateCombo.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        stateCombo.setForeground(new java.awt.Color(38, 172, 235));
        stateCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming" }));
        stateCombo.setToolTipText("<html>\nThis combo box allows users<br>\n to filter the state, in which<br>\nthe data displayed will only b<br>\nfor that state.\n</html>");
        stateCombo.setFocusable(false);

        monthCombo.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        monthCombo.setForeground(new java.awt.Color(38, 172, 235));
        monthCombo.setToolTipText("<html>\nThis combo box allows users<br>\nto filter the month, in which<br>\nthe data displayed will only be<br> \nretrieved from that month period.\n</html>");
        monthCombo.setFocusable(false);
        monthCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(tableTypeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(monthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monthCombo, 0, 145, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(stateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(stateLabel)
                    .addComponent(monthLabel)
                    .addComponent(tableTypeLabel)
                    .addComponent(tableTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout comboPanelLayout = new javax.swing.GroupLayout(comboPanel);
        comboPanel.setLayout(comboPanelLayout);
        comboPanelLayout.setHorizontalGroup(
            comboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(comboPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        comboPanelLayout.setVerticalGroup(
            comboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, comboPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(396, 396, 396))
        );

        jPanel3.add(comboPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 840, 120));

        tablePanel.setBackground(new java.awt.Color(255, 255, 255));
        tablePanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Data:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 1, 11), new java.awt.Color(38, 172, 235))); // NOI18N

        scrollPane.setForeground(new java.awt.Color(38, 172, 235));
        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        dataTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        dataTable.getTableHeader().setReorderingAllowed(false);
        scrollPane.setViewportView(dataTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.add(tablePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 127, 840, 470));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 865, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void monthComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboActionPerformed
    }//GEN-LAST:event_monthComboActionPerformed
    
    /**
     * Purpose: ActionListener for tableTypeComboBox. 
     * If tableTypeCombo is set to "Monthly Cases And Deaths", update monthCombo Jan,2020-April,2021
     * If tableTypeCombo is set to "Monthly Vaccine Information", update monthCombo Jan,2021-April,2021
     * If tableTypeCombo is set to "Monthly Trends", update monthCombo Jan-Feb,2021-Mar-April,2021
     * 
     * @param evt 
     */
    private void tableTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableTypeComboActionPerformed
        monthCombo.removeAllItems();
        if ("Monthly Cases And Deaths".equals(String.valueOf(tableTypeCombo.getSelectedItem()))){
            monthCombo.addItem("January, 2020");
            monthCombo.addItem("February, 2020");
            monthCombo.addItem("March, 2020");
            monthCombo.addItem("April, 2020");
            monthCombo.addItem("May, 2020");
            monthCombo.addItem("June, 2020");
            monthCombo.addItem("July, 2020");
            monthCombo.addItem("August, 2020");
            monthCombo.addItem("Septemer, 2020");
            monthCombo.addItem("October, 2020");
            monthCombo.addItem("November, 2020");
            monthCombo.addItem("December, 2020");
            monthCombo.addItem("January, 2021");
            monthCombo.addItem("February, 2021");
            monthCombo.addItem("March, 2021");
            monthCombo.addItem("April, 2021");
        } else if ("Monthly Vaccine Information".equals(String.valueOf(tableTypeCombo.getSelectedItem()))) {
            monthCombo.addItem("January, 2021");
            monthCombo.addItem("February, 2021");
            monthCombo.addItem("March, 2021");
            monthCombo.addItem("April, 2021");
            //jComboBox3.addItem("May, 2021");
        } else if ("Monthly Trends".equals(String.valueOf(tableTypeCombo.getSelectedItem()))) {
            monthCombo.addItem("January-February, 2021");
            monthCombo.addItem("February-March, 2021");
            monthCombo.addItem("March-April, 2021");
        }
    }//GEN-LAST:event_tableTypeComboActionPerformed

    /**
     * Purpose: ActionListener for update "Go" button.
     * 
     * @param evt 
     */
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        Database db = new Database(); //Database object to use selectData(String, String, String)
        try {
            //Instantiation of ArrayList<Dataset> "tableRows"
            ArrayList<Dataset> tableRows = new ArrayList<Dataset>();
            
            //Sets tableRows from Database.selectData(String, String, String)
            tableRows = db.selectData(String.valueOf(tableTypeCombo.getSelectedItem())
                                     ,String.valueOf(monthCombo.getSelectedItem())
                                     ,String.valueOf(stateCombo.getSelectedItem()));
            
            int tableColumnsSize = 0;
            
            //If & else-if statements to determine the column size of the table based on the constructor flag
            System.out.println("test");
            if (tableRows.get(0).getConstructorFlag() == 1) {
                tableColumnsSize = 0;
            } else if (tableRows.get(0).getConstructorFlag() == 2) {
                tableColumnsSize = 4;
            } else if (tableRows.get(0).getConstructorFlag() == 3) {
                tableColumnsSize = 7;
            } else if (tableRows.get(0).getConstructorFlag() == 4) {
                tableColumnsSize = 8;
            }
            
            //2D Object array and String array used to create table model for JTable
            Object[][] tableRowsObj = new Object[tableRows.size()][tableColumnsSize];
            String[] columnNames = new String[tableColumnsSize];
            
            //Based on column size, store data into 2D Object array and set String array
            if (tableColumnsSize == 4) {
                for (int i = 0; i < tableRows.size(); i++){
                    tableRowsObj[i][0] = tableRows.get(i).getDate();
                    tableRowsObj[i][1] = tableRows.get(i).getState();
                    tableRowsObj[i][2] = tableRows.get(i).getCases();
                    tableRowsObj[i][3] = tableRows.get(i).getDeaths();
                }
                columnNames[0] = "Date";
                columnNames[1] = "State";
                columnNames[2] = "Cases";
                columnNames[3] = "Deaths";
                
            } else if (tableColumnsSize == 7) {
                for (int i = 0; i < tableRows.size(); i++){
                    tableRowsObj[i][0] = tableRows.get(i).getDate();
                    tableRowsObj[i][1] = tableRows.get(i).getState();
                    tableRowsObj[i][2] = tableRows.get(i).getTotalVac();
                    tableRowsObj[i][3] = tableRows.get(i).getTotalDis();
                    tableRowsObj[i][4] = tableRows.get(i).getPeopleVac();
                    tableRowsObj[i][5] = tableRows.get(i).getPeopleFullyVac();
                    tableRowsObj[i][6] = tableRows.get(i).getDailyVac();
                }
                columnNames[0] = "Date";
                columnNames[1] = "State";
                columnNames[2] = "Total Vaccines";
                columnNames[3] = "Total Distributed";
                columnNames[4] = "People Vaccinated";
                columnNames[5] = "People Fully Vaccinated";
                columnNames[6] = "Daily Vaccinated";
                
            } else if (tableColumnsSize == 8) {
                for (int i = 0; i < tableRows.size(); i++){
                    tableRowsObj[i][0] = tableRows.get(i).getState();
                    if (tableRows.get(i).getCases() <= 0){ //if cases are negative or zero, keep sign
                        tableRowsObj[i][1] = tableRows.get(i).getCases();
                    } else if (tableRows.get(i).getCases() > 0) { //if cases are positive, add plus sign
                        tableRowsObj[i][1] = "+"+String.valueOf(tableRows.get(i).getCases());
                    }
                    if (tableRows.get(i).getDeaths() <= 0){ //if deaths are negative or zero, keep sign
                        tableRowsObj[i][2] = tableRows.get(i).getDeaths();
                    } else if (tableRows.get(i).getDeaths() > 0) { //if deaths are positive, add plus sign
                        tableRowsObj[i][2] = "+"+String.valueOf(tableRows.get(i).getDeaths());
                    }
                    if (tableRows.get(i).getTotalVac() <= 0){ //if totalVacs are negative or zero, keep sign
                        tableRowsObj[i][3] = tableRows.get(i).getTotalVac();
                    } else if (tableRows.get(i).getTotalVac() > 0) { //if totalVacs are positive, add plus sign
                        tableRowsObj[i][3] = "+"+String.valueOf(tableRows.get(i).getTotalVac());
                    }
                    if (tableRows.get(i).getTotalDis() <= 0){ //if totalDis are negative or zero, keep sign
                        tableRowsObj[i][4] = tableRows.get(i).getTotalDis();
                    } else if (tableRows.get(i).getTotalDis() > 0) { //if totalDis are positive, add plus sign
                        tableRowsObj[i][4] = "+"+String.valueOf(tableRows.get(i).getTotalDis());
                    }
                    if (tableRows.get(i).getPeopleVac() <= 0){ //if peopleVacs are negative or zero, keep sign
                        tableRowsObj[i][5] = tableRows.get(i).getPeopleVac();
                    } else if (tableRows.get(i).getPeopleVac() > 0) { //if peopleVacs are positive, add plus sign
                        tableRowsObj[i][5] = "+"+String.valueOf(tableRows.get(i).getPeopleVac());
                    }
                    if (tableRows.get(i).getPeopleFullyVac() <= 0){ //if peopleFullyVacs are negative or zero, keep sign
                        tableRowsObj[i][6] = tableRows.get(i).getPeopleFullyVac();
                    } else if (tableRows.get(i).getPeopleFullyVac() > 0) { //if peopleFullyVacs are positive, add plus sign
                        tableRowsObj[i][6] = "+"+String.valueOf(tableRows.get(i).getPeopleFullyVac());
                    }
                    if (tableRows.get(i).getDailyVac() <= 0){ //if dailyVacs are negative or zero, keep sign
                        tableRowsObj[i][7] = tableRows.get(i).getDailyVac();
                    } else if (tableRows.get(i).getDailyVac() > 0) { //if dailyVacs are positive, add plus sign
                        tableRowsObj[i][7] = "+"+String.valueOf(tableRows.get(i).getDailyVac());
                    }
                }
                columnNames[0] = "State";
                columnNames[1] = "Cases";
                columnNames[2] = "Deaths";
                columnNames[3] = "Total Vaccines";
                columnNames[4] = "Total Distributed";
                columnNames[5] = "People Vaccinated";
                columnNames[6] = "People Fully Vaccinated";
                columnNames[7] = "Daily Vaccinated";
            }
           
            //Sets table model by using 2D Object array and String array as parameters
            DataTableModel tableModel = new DataTableModel(columnNames, tableRowsObj){
                @Override
                public boolean isCellEditable(int row, int column){
                    return false;
                }
            };
            dataTable.setModel(tableModel);
            
            //Configure row height and column width
            dataTable.setRowHeight(50);
            for(int i = 0; i < tableColumnsSize; i++){
                if (tableColumnsSize == 4){
                    dataTable.getColumnModel().getColumn(i).setPreferredWidth(189);
                } else if (tableColumnsSize == 7){
                    dataTable.getColumnModel().getColumn(i).setPreferredWidth(165);
                } else if (tableColumnsSize == 8){
                    dataTable.getColumnModel().getColumn(i).setPreferredWidth(165);
                }
            }
            
            //Centers table cells
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            dataTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
            dataTable.setDefaultRenderer(String.class, centerRenderer);
            dataTable.setDefaultRenderer(Integer.class, centerRenderer);
            
        } catch (SQLException ex) {
            Logger.getLogger(DataFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel comboPanel;
    private javax.swing.JTable dataTable;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox<String> monthCombo;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JComboBox<String> stateCombo;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JComboBox<String> tableTypeCombo;
    private javax.swing.JLabel tableTypeLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
